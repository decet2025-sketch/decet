name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        
    - name: Run black (code formatting)
      run: |
        black --check --diff functions/ tests/ shared/
        
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff functions/ tests/ shared/
        
    - name: Run flake8 (linting)
      run: |
        flake8 functions/ tests/ shared/ --max-line-length=100 --extend-ignore=E203,W503
        
    - name: Run mypy (type checking)
      run: |
        mypy functions/ tests/ shared/ --ignore-missing-imports --no-strict-optional

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=functions --cov=shared --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run bandit security scan
      run: |
        bandit -r functions/ shared/ -f json -o bandit-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  build-functions:
    name: Build Function Packages
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Build admin_router function
      run: |
        cd functions/admin_router
        pip install -r requirements.txt -t .
        zip -r ../../admin_router.zip . -x "*.pyc" "__pycache__/*" "*.git*"
        
    - name: Build graphy_webhook function
      run: |
        cd functions/graphy_webhook
        pip install -r requirements.txt -t .
        zip -r ../../graphy_webhook.zip . -x "*.pyc" "__pycache__/*" "*.git*"
        
    - name: Build certificate_worker function
      run: |
        cd functions/certificate_worker
        pip install -r requirements.txt -t .
        zip -r ../../certificate_worker.zip . -x "*.pyc" "__pycache__/*" "*.git*"
        
    - name: Build sop_router function
      run: |
        cd functions/sop_router
        pip install -r requirements.txt -t .
        zip -r ../../sop_router.zip . -x "*.pyc" "__pycache__/*" "*.git*"
        
    - name: Upload function packages
      uses: actions/upload-artifact@v3
      with:
        name: function-packages
        path: |
          admin_router.zip
          graphy_webhook.zip
          certificate_worker.zip
          sop_router.zip

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-functions]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download function packages
      uses: actions/download-artifact@v3
      with:
        name: function-packages
        
    - name: Deploy to Appwrite Staging
      env:
        APPWRITE_ENDPOINT: ${{ secrets.STAGING_APPWRITE_ENDPOINT }}
        APPWRITE_PROJECT: ${{ secrets.STAGING_APPWRITE_PROJECT }}
        APPWRITE_API_KEY: ${{ secrets.STAGING_APPWRITE_API_KEY }}
      run: |
        # Install Appwrite CLI
        npm install -g appwrite-cli
        
        # Login to Appwrite
        appwrite client --endpoint $APPWRITE_ENDPOINT --project $APPWRITE_PROJECT
        
        # Deploy functions
        appwrite functions create --functionId=admin_router --name="Admin Router (Staging)" --runtime=python-3.9 || true
        appwrite functions create --functionId=graphy_webhook --name="Graphy Webhook (Staging)" --runtime=python-3.9 || true
        appwrite functions create --functionId=certificate_worker --name="Certificate Worker (Staging)" --runtime=python-3.9 || true
        appwrite functions create --functionId=sop_router --name="SOP Router (Staging)" --runtime=python-3.9 || true
        
        # Deploy function code
        appwrite functions deploy --functionId=admin_router --src=admin_router.zip
        appwrite functions deploy --functionId=graphy_webhook --src=graphy_webhook.zip
        appwrite functions deploy --functionId=certificate_worker --src=certificate_worker.zip
        appwrite functions deploy --functionId=sop_router --src=sop_router.zip

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-functions]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download function packages
      uses: actions/download-artifact@v3
      with:
        name: function-packages
        
    - name: Deploy to Appwrite Production
      env:
        APPWRITE_ENDPOINT: ${{ secrets.PRODUCTION_APPWRITE_ENDPOINT }}
        APPWRITE_PROJECT: ${{ secrets.PRODUCTION_APPWRITE_PROJECT }}
        APPWRITE_API_KEY: ${{ secrets.PRODUCTION_APPWRITE_API_KEY }}
      run: |
        # Install Appwrite CLI
        npm install -g appwrite-cli
        
        # Login to Appwrite
        appwrite client --endpoint $APPWRITE_ENDPOINT --project $APPWRITE_PROJECT
        
        # Deploy functions
        appwrite functions create --functionId=admin_router --name="Admin Router" --runtime=python-3.9 || true
        appwrite functions create --functionId=graphy_webhook --name="Graphy Webhook" --runtime=python-3.9 || true
        appwrite functions create --functionId=certificate_worker --name="Certificate Worker" --runtime=python-3.9 || true
        appwrite functions create --functionId=sop_router --name="SOP Router" --runtime=python-3.9 || true
        
        # Deploy function code
        appwrite functions deploy --functionId=admin_router --src=admin_router.zip
        appwrite functions deploy --functionId=graphy_webhook --src=graphy_webhook.zip
        appwrite functions deploy --functionId=certificate_worker --src=certificate_worker.zip
        appwrite functions deploy --functionId=sop_router --src=sop_router.zip

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
